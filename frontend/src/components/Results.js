import React from "react";
import { AiOutlineClose } from "react-icons/ai";
import { FiDownload } from "react-icons/fi";
import { DropletIcon, AlertTriangle, CheckCircle } from "lucide-react";
import jsPDF from "jspdf";

const Results = ({ result, darkMode, isOpen, onClose, lakeName, previewUrl }) => {
  if (!result || !isOpen) return null;

  const prediction = result.prediction;
  const status = prediction === 1 ? "Good Quality" : "Poor Quality";
  const date = new Date().toLocaleString();

  const handleDownload = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;

    // Modern minimalist styling
    doc.setFillColor(255, 255, 255);
    doc.rect(0, 0, pageWidth, pageHeight, 'F');

    // Clean header
    doc.setFillColor(248, 250, 252);
    doc.rect(0, 0, pageWidth, 45, 'F');

    // Title with modern font
    doc.setTextColor(30, 41, 59);
    doc.setFontSize(28);
    doc.setFont('helvetica', 'bold');
    doc.text("Water Quality Report", 20, 30);

    // Subtle date
    doc.setFontSize(11);
    doc.setTextColor(100, 116, 139);
    doc.text(date, pageWidth - 20, 30, { align: 'right' });

    // Lake info with card-like design
    doc.setFillColor(250, 250, 250);
    doc.roundedRect(20, 60, 170, 45, 4, 4, 'F');
    
    doc.setFontSize(14);
    doc.setTextColor(30, 41, 59);
    doc.text("Lake Information", 30, 75);
    
    doc.setFontSize(12);
    doc.setTextColor(71, 85, 105);
    doc.text(`Name: ${lakeName}`, 30, 90);

    // Image section
    if (previewUrl) {
      try {
        doc.addImage(previewUrl, 'JPEG', 20, 120, 170, 85, undefined, 'MEDIUM');
      } catch (error) {
        console.error("Error adding image:", error);
      }
    }

    // Results section
    const resultsY = previewUrl ? 220 : 120;
    
    const resultColor = prediction === 1 
      ? { r: 34, g: 197, b: 94 }
      : { r: 239, g: 68, b: 68 };

    doc.setFillColor(250, 250, 250);
    doc.roundedRect(20, resultsY, 170, 50, 4, 4, 'F');

    doc.setFontSize(16);
    doc.setTextColor(resultColor.r, resultColor.g, resultColor.b);
    doc.text(status, 30, resultsY + 25);
    
    // Minimal footer
    doc.setFontSize(9);
    doc.setTextColor(148, 163, 184);
    doc.text("Generated by Lake Water Quality Analysis", pageWidth/2, pageHeight - 15, { align: 'center' });

    doc.save("water-quality-report.pdf");
  };

  const QualityIndicator = () => (
    <div className="relative w-full aspect-square max-w-sm mb-8">
      <div className={`absolute inset-0 rounded-2xl ${
        darkMode ? "bg-gray-800/50" : "bg-gray-50"
      } backdrop-blur-sm`} />
      <div className="absolute inset-0 flex items-center justify-center flex-col p-6">
        {prediction === 1 ? (
          <CheckCircle className="w-20 h-20 text-emerald-500 mb-4 transition-transform hover:scale-110" />
        ) : (
          <AlertTriangle className="w-20 h-20 text-rose-500 mb-4 transition-transform hover:scale-110" />
        )}
        <span className={`text-3xl font-bold mb-6 ${
          prediction === 1 ? "text-emerald-500" : "text-rose-500"
        }`}>
          {status}
        </span>
      </div>
    </div>
  );

  return (
    <div className="fixed inset-0 bg-black/30 backdrop-blur-md flex items-center justify-center z-50 p-4">
      <div className={`w-full max-w-3xl rounded-3xl shadow-2xl ${
        darkMode ? "bg-gray-900 text-gray-100" : "bg-white text-gray-900"
      } overflow-hidden transform transition-all duration-300`}>
        {/* Header */}
        <div className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <DropletIcon className={`w-10 h-10 ${
                prediction === 1 ? "text-emerald-500" : "text-rose-500"
              }`} />
              <div>
                <h2 className="text-3xl font-bold">Analysis Results</h2>
                <p className={`mt-1 text-sm ${darkMode ? "text-gray-400" : "text-gray-500"}`}>
                  {date}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className={`p-2 rounded-full transition-all ${
                darkMode 
                  ? "hover:bg-gray-800 text-gray-400 hover:text-gray-200" 
                  : "hover:bg-gray-100 text-gray-500 hover:text-gray-900"
              }`}
            >
              <AiOutlineClose size={24} />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="px-8 pb-8">
          <div className="grid md:grid-cols-2 gap-8">
            <div>
              <QualityIndicator />
              <div className={`p-6 rounded-2xl transition-all ${
                darkMode ? "bg-gray-800" : "bg-gray-50"
              }`}>
                <h3 className="text-xl font-semibold mb-4">Location Details</h3>
                <div className={darkMode ? "text-gray-300" : "text-gray-600"}>
                  <p>Lake Name: {lakeName}</p>
                </div>
              </div>
            </div>

            {previewUrl && (
              <div className="flex flex-col justify-center">
                <div className="relative rounded-2xl overflow-hidden group">
                  <img 
                    src={previewUrl} 
                    alt="Lake water" 
                    className="w-full aspect-4/3 object-cover transition duration-300 group-hover:scale-105" 
                  />
                  <div className={`absolute inset-0 transition-opacity ${
                    prediction === 1 
                      ? "bg-gradient-to-t from-emerald-500/30" 
                      : "bg-gradient-to-t from-rose-500/30"
                  } to-transparent`} />
                </div>
              </div>
            )}
          </div>

          <div className="mt-8 flex justify-end">
            <button
              onClick={handleDownload}
              className={`px-8 py-4 rounded-xl font-semibold flex items-center gap-3 
                transition-all hover:-translate-y-0.5 ${
                darkMode 
                  ? "bg-blue-600 hover:bg-blue-500" 
                  : "bg-blue-500 hover:bg-blue-600"
                } text-white shadow-lg`}
            >
              <FiDownload size={20} />
              Download Report
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Results;